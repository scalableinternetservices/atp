# GraphQL supports two basic types of request: queries and mutations. In both
# cases, you can specify the shape of the JSON you want to get back.
#
# This solves both the overfetching and underfetching problems that traditional
# REST and RPC APIs have: in one roundtrip, you get back exactly what you need,
# no more, no less.
#
# Queries and mutations behave similarly, except: on the server queries may be
# run in parallel, while mutations run one at a time. On the client, queries
# may use a cached response, while mutations always result in a request.
schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  # Returns the logged-in user making the query, or null if anonymous.
  self: User

  surveys: [Survey!]!
  survey (surveyId: Int!): Survey
  classes (email: String!): [Classes!]!
  friendsClasses (emails: [String!]!): [Classes!]!
  friends (email: String!): [Friends!]!
  exams (email: String!): [Exam!]!
}

type Mutation {
  # Records an answer to a survey question presented in class.
  answerSurvey (input: SurveyInput!): Boolean!

  # Moves the survey to the next question (or starts it if it hasn't started). ADMIN only.
  nextSurveyQuestion (surveyId: Int!): Survey

  createClass (input: ClassInput!): Boolean!
  addFriend (input: FriendInput!): Boolean!
  removeFriend (input: FriendInput!): Boolean!
  addExam (input: ExamInput!): Boolean!
}

type Subscription {
  surveyUpdates (surveyId: Int!): Survey
	classesUpdates (email: String!): [Classes!]!
}

type User {
  id: Int!
  userType: UserType!
  email: String!
  name: String!
}

enum UserType { ADMIN, USER }

type Survey {
  id: Int!

  # Pretty name for the survey.
  name: String!

  # True if the survey has started.
  isStarted: Boolean!

  # True if the survey has completed.
  isCompleted: Boolean!

  # The current survey question, or null if the survey hasn't started.
  currentQuestion: SurveyQuestion

  # All the survey's questions, in presentation order.
  questions: [SurveyQuestion]!
}

type SurveyQuestion {
  id: Int!

  # The prompt, e.g. "how long have you been programming".
  prompt: String!

  # The choices available if multiple choice, null if not multiple choice.
  choices: [String!]

  # All answers received so far for the question.
  answers: [SurveyAnswer!]!

  # The Survey that this question is on.
  survey: Survey!
}

type SurveyAnswer {
  id: Int!
  answer: String!
  question: SurveyQuestion!
}

input SurveyInput {
  questionId: Int!
  answer: String!
}

type Classes {
  id: Int!

  title: String!

  rRule: String!

  zoom: String!

  startDate: String!

  endDate: String!
}

input ClassInput {
  title: String!
  rRule: String!
  zoom: String!
  startDate: String!
  endDate: String!
  email: String!
}

type Friends {
  id: Int!
  friends: String!
}

input FriendInput {
  friend: String!
  email: String!
}

type Exam {
  id: Int!

  email: String!

  title: String!

  type: String!

  date: String!
}

input ExamInput {
  email: String!

  title: String!

  type: String!

  date: String!
}
